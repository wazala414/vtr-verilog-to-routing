<!--
 Architecture file for testing the custom switch block format (as well as enhanced connection block descriptions and routing mux delay tables) 

  * This is a Lattice ECP-like architecture.
  * Logic block and routing mux area/delay values have been extracted from COFFE (Chiasson, Betz 2013) using the 22nm node.
  * I/O, BRAM and DSP blocks have been adapted from the 40nm Stratix IV-like architecture file, with areas scaled to 22nm
    but delay values unchanged.

  * The inter-LB routing network uses length-2 wire segments on the semi-global metal layer for 85% of the channel width and 15% 
    length-4 wire segments on the global metal layer. Global layer length-4 wires are accessible from block output pins only, and
    can drive other global-layer wires as well as the semi-global length-2's (on-CB, off-SB topology).
      * Custom switch blocks descriptions, modified connection block descriptions and routing mux delay tables are used describe this topology.
      * Custom switch block descriptions have been elongated somewhat to expose more of the format features.
      * See VTR documentation for more info on the enhanced inter-LB interconnect specifications.
 -->
<architecture>
  <models>
  </models>
  <tiles>
    <tile name="io">
      <sub_tile name="io" capacity="2">
        <equivalent_sites>
          <site pb_type="io" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="outpad" num_pins="1"/>
        <output name="inpad" num_pins="1"/>
        <clock name="clock" num_pins="1"/>
        <fc in_type="abs" in_val="2" out_type="abs" out_val="2"/>
          <!-- <fc_override port_name="outpad" segment_name="l2s" fc_type="abs" fc_val="2"/>
          <fc_override port_name="inpad" segment_name="l2s" fc_type="abs" fc_val="2"/>
          <fc_override port_name="clock" segment_name="l2s" fc_type="abs" fc_val="2"/>
        </fc> -->
        <pinlocations pattern="custom">
          <loc side="left">io.outpad io.inpad io.clock</loc>
          <loc side="top">io.outpad io.inpad io.clock</loc>
          <loc side="right">io.outpad io.inpad io.clock</loc>
          <loc side="bottom">io.outpad io.inpad io.clock</loc>
        </pinlocations>
      </sub_tile>
    </tile>
    <tile name="clb" area="3900">
      <sub_tile name="clb">
        <equivalent_sites>
          <site pb_type="clb" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="I0" num_pins="4" equivalent="full"/>
        <input name="I1" num_pins="4" equivalent="full"/>
        <output name="O" num_pins="4" equivalent="full"/>
        <clock name="clk" num_pins="4"/>
        <fc in_type="abs" in_val="2" out_type="abs" out_val="2"/>
          <!-- <fc_override port_name="I0" segment_name="l2s" fc_type="abs" fc_val="2"/>
          <fc_override port_name="I1" segment_name="l2s" fc_type="abs" fc_val="2"/>
          <fc_override port_name="clk" segment_name="l2s" fc_type="abs" fc_val="2"/>
          <fc_override port_name="O" segment_name="l2s" fc_type="abs" fc_val="2"/>
        </fc> -->
        <pinlocations pattern="spread"/>
      </sub_tile>
    </tile>
  </tiles>
  <!-- ODIN II specific config ends -->
  <!-- Physical descriptions begin -->
  <layout>
    <fixed_layout name="" width="4" height="4">
      <!--Perimeter of 'io' blocks with 'EMPTY' blocks at corners-->
      <perimeter type="io" priority="100"/>
      <corners type="EMPTY" priority="101"/>
      <!--Fill with 'clb'-->
      <fill type="clb" priority="10"/>
    </fixed_layout>
  </layout>
  <device>
    <sizing R_minW_nmos="13090.000000" R_minW_pmos="19086.831111"/>
    <area grid_logic_tile_area="0"/>
    <chan_width_distr>
      <x distr="uniform" peak="1.000000"/>
      <y distr="uniform" peak="1.000000"/>
    </chan_width_distr>
    <switch_block type="wilton" fs="3"/>
    <connection_block input_switch_name="ipin_cblock"/>
  </device>

  <switchlist>
    <!-- l2s_mux drives length-2 wires on the semi-global metal layer -->
    <switch type="tristate" name="l2s_tri" R="878" Cin="2e-15" Cout="0.000000e+00" buf_size="14.2000000">
      <Tdel num_inputs="6" delay="5.65e-11"/>
      <Tdel num_inputs="15" delay="6.84e-11"/>
    </switch>
    <!--switch ipin_cblock resistance set to yeild for 4x minimum drive strength buffer-->
    <switch type="tristate" name="ipin_cblock" R="3272.5" Cout="0." Cin="2e-15" Tdel="7.562e-11" buf_size="auto"/>
  </switchlist>
  <segmentlist>
    <!-- 85% length-2 wires on the semi-global metal layer -->
    <segment freq="1" name="l2s" length="1" type="bidir" Rmetal="174" Cmetal="0.0">
      <wire_switch name="l2s_tri"/>
      <opin_switch name="l2s_tri"/>
      <sb type="pattern">1 1</sb>
      <cb type="pattern">1</cb>
    </segment>

  </segmentlist>
  <!-- Define custom switch blocks -->
      
  <complexblocklist>
    <!-- Capacity is a unique property of I/Os, it is the maximum number of I/Os that can be placed at the same (X,Y) location on the FPGA -->
    <pb_type name="io">
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>
      <!-- IOs can operate as either inputs or outputs -->
      <mode name="inpad">
        <pb_type name="inpad" blif_model=".input" num_pb="1">
          <output name="inpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="inpad" input="inpad.inpad" output="io.inpad">
            <delay_constant max="4.243e-11" in_port="inpad.inpad" out_port="io.inpad"/>
          </direct>
        </interconnect>
      </mode>
      <mode name="outpad">
        <pb_type name="outpad" blif_model=".output" num_pb="1">
          <input name="outpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="outpad" input="io.outpad" output="outpad.outpad">
            <delay_constant max="1.394e-11" in_port="io.outpad" out_port="outpad.outpad"/>
          </direct>
        </interconnect>
      </mode>
      <!-- IOs go on the periphery of the FPGA, for consistency, 
          make it physically equivalent on all sides so that only one definition of I/Os is needed.
          If I do not make a physically equivalent definition, then I need to define 4 different I/Os, one for each side of the FPGA
        -->
    </pb_type>
    <!-- Logic cluster definition -->
    <!-- k4 N8 I32 with no input crossbar (but LUT inputs are equivalent
         and each LUT has it's own dedicated inputs) -->
    <pb_type name="clb">
      <input name="I0" num_pins="4" equivalent="full"/>
      <input name="I1" num_pins="4" equivalent="full"/>
      <output name="O" num_pins="4" equivalent="full"/>
      <clock name="clk" num_pins="4"/>
      <!-- Describe basic logic element. -->
      <!-- Define 4LUT mode -->
      <pb_type name="ble4" num_pb="1">
        <input name="in" num_pins="2"/>
        <output name="out" num_pins="1"/>
        <clock name="clk" num_pins="1"/>
        <!-- Define LUT -->
        <pb_type name="lut2" blif_model=".names" num_pb="1" class="lut">
          <input name="in" num_pins="2" port_class="lut_in"/>
          <output name="out" num_pins="1" port_class="lut_out"/>
          <!-- LUT timing using delay matrix -->
          <delay_matrix type="max" in_port="lut2.in" out_port="lut2.out">
                1.145e-10
                1.145e-10
              </delay_matrix>
        </pb_type>
        <!-- Define flip-flop -->
        <pb_type name="ff" blif_model=".latch" num_pb="1" class="flipflop">
          <input name="D" num_pins="1" port_class="D"/>
          <output name="Q" num_pins="1" port_class="Q"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="1.891e-11" port="ff.D" clock="clk"/>
          <T_clock_to_Q max="6.032e-11" port="ff.Q" clock="clk"/>
        </pb_type>
        <interconnect>
          <direct name="direct1" input="ble4.in" output="lut2.in"/>
          <direct name="direct2" input="lut2.out" output="ff.D">
            <!-- Advanced user option that tells CAD tool to find LUT+FF pairs in netlist -->
            <pack_pattern name="ble4" in_port="lut2.out" out_port="ff.D"/>
          </direct>
          <direct name="direct3" input="ble4.clk" output="ff.clk"/>
          <mux name="mux1" input="ff.Q lut2.out" output="ble4.out">
            <delay_constant max="16.6e-12" in_port="lut2.out" out_port="ble4.out"/>
            <delay_constant max="30e-12" in_port="ff.Q" out_port="ble4.out"/>
          </mux>
        </interconnect>
      </pb_type>
      <interconnect>
        <!-- each input connects to its respective LUT with input equivalency -->
        <complete name="completeI0" input="clb.I0" output="ble4.in[0]"/>
        <complete name="completeI1" input="clb.I1" output="ble4.in[1]"/>
        <!-- clock -->
        <complete name="clks" input="clb.clk" output="ble4.clk"/>
        <!-- outputs -->
        <complete name="directO" input="ble4.out" output="clb.O"/>
      </interconnect>
      <!-- Place this general purpose logic block in any unspecified column -->
    </pb_type>
    <!-- Define general purpose logic block (CLB) ends -->
    <!-- Define fracturable multiplier begin -->
    <!-- This multiplier can operate as a 36x36 multiplier that can fracture to two 18x18 multipliers each of which can further fracture to two 9x9 multipliers 
	   For delay modelling, the 36x36 DSP multiplier in Stratix IV has a delay of 1.523 ns + 1.93 ns
	    = 3.45 ns. The 18x18 mode doesn't need to sum four 18x18 multipliers, so it is a bit
	   faster: 1.523 ns for the multiplier, and 1.09 ns for the multiplier output block.
	    For the input and output interconnect delays, unlike Stratix IV, we don't
	   have any routing/logic flexibility (crossbars) at the inputs.  There is some output muxing
	   in Stratix IV and this architecture to select which multiplier outputs should go out (e.g.
	   9x9 outputs, 18x18 or 36x36) so those are very close between the two architectures. 
	   We take the conservative (slightly pessimistic)
           approach modelling the input as the same as the Stratix IV input delay and the output delay the same as the Stratix IV DSP out delay.
		   
	   We estimate block area by using the published Stratix III data (which is architecturally identical to Stratix IV)
	      (H. Wong, V. Betz and J. Rose, "Comparing FPGA vs. Custom CMOS and the Impact on Processor Microarchitecture", FPGA 2011) of 0.2623 
		  mm^2 and scaling from 65 to 40 nm to obtain 0.0993 mm^2. That area is for a DSP block with approximately 2x the functionality of 
		  the block we use (can implement two 36x36 multiplies instead of our 1, eight 18x18 multiplies instead of our 4, etc.). Hence we 
		  divide the area by 2 to obtain 0.0497 mm^2. One minimum-width transistor units = 60 L^2 (where L = 40 nm), so is 518,000 MWTUS. 
		  That area includes routing and the connection block input muxes.  Our DSP block is four 
		  rows high, and hence includes four horizontal routing channel segments and four vertical ones, which is 4x the routing of a logic 
		  block (single tile). It also includes 3.6x the outputs of a logic block, and 1.8x the inputs. Hence a slight overestimate of the routing
		  area associated with our DSP block is four times that of a logic tile, where the routing area of a logic tile was calculated above (at W = 300)
		  as 30481 MWTAs. Hence the (core, non-routing) area our DSP block is approximately 518,000 - 4 * 30,481 = 396,000 MWTUs.
      -->
  </complexblocklist>
</architecture>
